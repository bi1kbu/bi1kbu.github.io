[{"content":"曲面宜长不宜短 最先遇到的问题：在生成实体时发现出现了报错，仔细检查后认为问题出在了两个曲面的缝隙上。\n这个缝隙并非建模时没有用同一根曲面，而且Creo的精度系统带来的，而当时我并没有将两个曲面做的足够长，所以后期修补起来极其麻烦。\n曲面-相交-修剪 与 合并的对比 两个曲面想要在一条线上交会并形成一体，最好的方案还是曲面合并。\n在最开始的时候我不了解合并命令时是可以指定合并方向并自动修剪的，所以采用了相交后修剪的方式，也是给上述报错留下了隐患。\n两实体中间有缝隙 尝试过用拉伸、加厚等方式，均没有处理成功，\n最终解决方案是使用曲面移除命令实现，将缝隙一面选中后移除。\n移除前：\n移除后：\n去除凸起 可使用偏移→替换曲面特征来实现\n大面crtl+c、ctrl+v然后小面进行偏移→替换曲面特征\n有小面的应先去移除小面\n第一步：复制修整的基准面\n第二步：点击要移除的曲面，点击偏移\n第三步：选择替换曲面特征\n第四步：点击之前辅助爹基准面，即可\n出现倒扣的问题 主要问题在于最开始做面的时候曲率没有全部在外面，不仅需要和分型面成90°，还需要把曲率进行调整。\n错误的：\n正确的：\n","date":"2023-03-18T00:00:00Z","image":"https://bi1kbu.github.io/p/creo-surface-modeling/image-20230315104910941_huab9a0665c9e35135c4c2aae40608d499_34741_120x120_fill_box_smart1_3.png","permalink":"https://bi1kbu.github.io/p/creo-surface-modeling/","title":"曲面建模注意事项汇总"},{"content":"基本流程 创建一个GithubPages仓库 将仓库拉到本地 添加静态网页文件添加到本地仓库 提交到github仓库 创建GithubPages仓库 新建一个public仓库，并命名为username.github.io，其中username指github账户名。\nGitHub Pages 项目需要符合 username.github.io 的特殊命名格式，如果仓库名和账户名没有完全匹配的话，网站就不能运行，所以一定要保证完全匹配。\n将仓库拉到本地 在你希望的目录位置，用下面的命令将新建的远程仓库拉到本地。\ngit clone https://github.com/username/username.github.io\n添加静态网页文件添加到本地仓库 将hugo生成的public/目录下所有文件，复制到本地仓库，\n提交到github仓库 git push -u origin main\n如果在此之前没有绑定过仓库，还需要绑定一下。\n后续将本地生成的网页文件同步到仓库中的流程 通过Hugo构建网页 在本地项目根目录打开cmd并输入hugo\n报错及解决方案 生成密钥时报错 报错内容：bash: ~ssh-keygen: command not found\n解决方案：在windows的“设置→应用→应用和功能→可选功能”里搜索OpenSSH并安装。\n然后以管理员身份运行PowerShell\n输入以下内容\nStart-Service sshd\nSet-Service -Name sshd -StartupType 'Automatic'\r1 2 3 4 5 6 7 8 9 10 11 if (!(Get-NetFirewallRule -Name \u0026#34;OpenSSH-Server-In-TCP\u0026#34; -ErrorAction SilentlyContinue | Select-Object Name, Enabled)) { Write-Output \u0026#34;Firewall Rule \u0026#39;OpenSSH-Server-In-TCP\u0026#39; does not exist, creating it...\u0026#34; New-NetFirewallRule -Name \u0026#39;OpenSSH-Server-In-TCP\u0026#39; -DisplayName \u0026#39;OpenSSH Server (sshd)\u0026#39; -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22 } else { Write-Output \u0026#34;Firewall rule \u0026#39;OpenSSH-Server-In-TCP\u0026#39; has been created and exists.\u0026#34; } ","date":"2023-03-13T00:00:00Z","image":"https://bi1kbu.github.io/p/hugo-launch/wx_20230313130937_hu7e5e4a36377aad84e195282a989f8f73_207026_120x120_fill_box_smart1_3.png","permalink":"https://bi1kbu.github.io/p/hugo-launch/","title":"使用GithubPages部署上线"},{"content":"前期计划 去除国际化 因为我的外文确实不咋地，而且也没打算让我的博客写出国，更多的还是自己留着慢慢总结积累，万一用得上呢(bushi\n首先在根目录下的配置文件“config.yaml”中将languages部分删掉，保留中文部分的title。 然后将languageCode改为“zh-cn”\n左图是处理前，右图是处理后。 修改头像 在“assets”文件夹内创建一个文件夹，命名为“img”，将头像切割成正方形，更名为“avatar.png”，并放在img文件夹内即可。\n修改博主名字、博客网站标题和网站简介 由于我使用的主题没有提供单独的博主名字设置和主页标题设置，所以博主名字我直接在主题里进行了修改。 左侧页面名字位置的配置在“blog\\themes\\hugo-theme-stack\\layouts\\partials\\sidebar\\left.html”文件中，找到这个文件的方法是在网页中审查元素，找到关键词后进行查找，最终定位到这个位置。图中红色框是我修改后的内容，蓝色框是审查元素找到的内容。\n博客网站的标题和简介可以直接在根目录下的配置文件中修改：\n首页博主名字下面的介绍也可以在根目录的配置中修改：\n不过我想把我写的内容排一下版，所以还是在主题里面直接修改了，和上面修改博主名字的操作一样，这里不再赘述。\n修改页脚 小功能记录 ","date":"2023-03-12T00:00:00Z","image":"https://bi1kbu.github.io/p/hugo-development/wx_20230312184348_huba3a0cbdfc6932219658b6cc6860c32f_120735_120x120_fill_box_smart1_3.png","permalink":"https://bi1kbu.github.io/p/hugo-development/","title":"Hugo博客美化（未完）"},{"content":"前言 在我最开始想搭建一个Hugo博客时，如何获取资料成了最大的问题。\n对于一个英语基本为零，计算机知识只能算略懂的人而言，直接到github并不是一个很好的选择，所以我选择到B站上看一看其他人是怎么做的。但是有一个问题，视频的知识密度并不如文字，对于需要一步一步跟着做的工作来说，看视频还是比较费时间。所以，百度。但是百度和CSDN等又全是些重复的、没有实际帮助的内容。在和ifLab社团同学聊天求助的时候，某大佬对于我提出的一个bug，给出了ChatGPT的答案，这让我才想起来，我还可以问ChatGPT。（所以说，还是没形成先问问AI的习惯）\n事实证明，ChatGPT给出的答案还不错，而且比起官方文档用软件翻译为中文看起来更像人话。 搭建过程 接下来的几个部分有一些采用我与ChatGPT对话的形式，掺杂着我的一些体会。还有一些确实ChatGPT给出的答案不靠谱不正确，所以后面就没采用。说到底ChatGPT还是一个语言模型，它毕竟没有实际操作过，只是学习的别人的文章，所以多少存在一些问题，而且数据库并不是最新的，我用的这个主题最后更新时间是18年，所以他有收录，新的主题就不一定了。\n★斜体字代表这是我向它提出的问题，代码块是他回答的内容。\n搭建Hugo博客的流程 我想用Hugo搭建一个博客，我该如何做？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 使用Hugo搭建博客是一个非常流行的选择，它是一个快速，易于使用的静态网站生成器。以下是一些基本的步骤： 安装Hugo：首先需要安装Hugo，你可以从Hugo官方网站上下载并安装它。 创建新站点：在命令行中使用hugo new site \u0026lt;your_site_name\u0026gt;命令来创建一个新站点，其中\u0026lt;your_site_name\u0026gt;是你的博客的名称。 添加主题：Hugo有很多不同的主题可供选择，你可以从Hugo官方网站主题列表上选择一个。下载主题并将其放在你的博客目录的/themes文件夹中。然后将你的博客配置文件中的theme字段设置为你所选择的主题名称。 创建文章：在你的博客目录中，使用hugo new \u0026lt;post_title\u0026gt;.md命令来创建一篇新文章。这将在/content/posts文件夹中创建一个新的Markdown文件，其中\u0026lt;post_title\u0026gt;是你文章的标题。 编辑文章：使用Markdown格式编辑文章，并在文件头部添加Front Matter元数据。这些元数据包括文章标题、日期、作者、摘要等。 启动Hugo服务器：在命令行中使用hugo server -D命令来启动本地服务器。这将生成你的博客，并在本地的http://localhost:1313上预览它。 部署博客：当你准备好将博客部署到生产环境时，可以使用hugo命令来生成静态HTML文件。将生成的文件上传到你的Web服务器或者静态网站托管服务上。 这些是基本的步骤，可以帮助你使用Hugo搭建一个博客。但是，使用Hugo的高级功能，如网站布局、自定义短代码和主题定制等，可以使你的博客更加个性化和专业化。 在Windows系统下安装Hugo 如何在Windows系统下安装Hugo？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 以下是在Windows系统下安装Hugo的步骤： 首先，您需要从Hugo的官方网站https://gohugo.io/getting-started/installing/下载最新版本的Hugo二进制文件。 解压缩下载的二进制文件到您想要安装Hugo的目录中。您可以选择将其放在C:\\Hugo或D:\\Hugo等文件夹中。 接下来，您需要将Hugo的安装路径添加到系统的PATH环境变量中，这样您就可以在任何地方都使用Hugo了。以下是如何添加PATH环境变量的步骤： a. 打开控制面板，点击“系统和安全”，然后选择“系统”。 b. 在左侧的面板中，选择“高级系统设置”。 c. 在“高级”选项卡下，单击“环境变量”按钮。 d. 在“系统变量”下，查找名为“Path”的变量，并选择“编辑”。 e. 单击“新建”按钮，然后在文本框中输入Hugo的安装路径。例如，如果您将Hugo安装在C:\\Hugo中，则输入“C:\\Hugo”。 f. 单击“确定”按钮，然后关闭所有窗口。 最后，您可以在命令行中测试Hugo是否安装成功。打开命令提示符窗口，并键入“hugo version”（不包括引号）。如果您看到类似“Hugo version 0.88.1 windows/amd64 BuildDate=...”的输出，则表示已成功安装Hugo。 现在，您已经成功地在Windows系统上安装了Hugo。 这里没提到一点，Hugo分两个版本，我是用的主题需要拓展版本，所以不要下载错了。拓展版与标准版在hugo version时显示不一样，标准版显示如下：\nhugo v0.102.3-b76146b129d7caa52417f8e914fc5b9271bf56fc windows/amd64 BuildDate=2022-09-01T10:16:19Z VendorInfo=gohugoio\r而拓展版会有一个+extended的标记：\nhugo v0.102.3-b76146b129d7caa52417f8e914fc5b9271bf56fc+extended windows/amd64 BuildDate=2022-09-01T10:16:19Z VendorInfo=gohugoio\r安装主题 我是用的主题是hugo-theme-stack，接下来以这个主题为例来讲我是如何安装的。从这里开始ChatGPT就开始不靠谱了，所以后面只有debug的时候让它当翻译了。\n首先访问Hugo主题页面，挑一个自己喜欢的。建议一定要挑一个一直在有人更新的主题，或者具备完善文档的主题。\n这里提供一下我使用的主题的文档，比上不足比下有余。\n下载主题有两种方式，一种是找到界面里面github的地址，然后用git来下载，如：\n1 git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 这个指令代表着将hugo-theme-stack主题克隆到自己博客网站的themes文件夹内，这个文件夹是用来专门放置主题的，所有文件夹的功能介绍可以在本文后面的“Hugo目录结构介绍”里找到。\n或者可以通过Code→Download ZIP，并将下载的主题解压缩到themes文件夹内，需要注意的是，通过这种方式下载下来的文件夹后面会带有一个-master后缀，需要删掉（说是会有bug，但是我没试，直接按网上教程给的走了）。\n最终效果如图所示： 运行主题自带的例程 在这个主题中，带有一个名为“exampleSite”的文件夹，这个文件夹里面存放的是一个例程，包括以下文件：\n1 2 3 4 5 6 exampleSite ├── content\t// 例程的主要文件 ├── .gitignore\t// git的忽略提交规则文件，对本文没啥用 ├── config.yaml\t// 配置文件，重要 ├── LICENSE\t// 许可文件，里面写了许可哪些内容，可以看看，对本文没啥用 └── README.md\t// 自述文件，可以看看，同样没啥用 把“content”文件和“config.yaml”文件复制到博客根目录，并删掉原来的配置文件（如果文件拓展名一样，在复制时直接点击替换就可以了）。如图：\n然后在根目录打开cmd，或者打开cmd切换到博客的根目录，输入hugo server，就可以运行了。\n运行后可以通过 http://localhost:1313/ 访问生成的博客。\n如果生成过程中出现超时等错误，可以看一下文后的报错排除部分是否有提及，如果没有请邮件联系我。\nHugo目录结构介绍 目录结构\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 blog\t//整个博客网站在一个文件夹内，任意名字都可以 ├── archetypes\t// ├── assets\t// ├── content\t//站点下所有的内容页面，也就是我们创建的md文件都在这个目录下面。 │　├── categories\t// │　├── page\t// │　├── post\t// │　└── _index.md\t// ├── data\t//data目录用来存储网站用到一些配置、数据文件 ├── layouts\t//存放用来渲染content目录下面内容的模版文件,如果用了第三方的主题，这里可能是空的，可以在这里新增覆盖也可以在themes文件里相应位置来改 ├── public\t//hugo编译后生成网站的所有文件都存储在这里面，把这个目录放到任意web服务器就可以发布网站成功。 ├── resources\t// ├── static\t//用来存储图片、css、js等静态资源文件。 ├── themes\t//用来存储主题，主题可以方便的帮助我们快速建立站点，也可以方便的切换网站的风格样式。 └── config.toml\t//全局配置文件，用来配置整个站点的信息 报错排除 连接超时报错 Twitter、YouTube、Vimeo等连接超时：\n根据报错提示找到对应文件，删除示例中报错的部分（这部分报错主要是由于连不上外网导致的，而且一般国内也没人用这些功能），如果搜不到大概率是由于win系统的搜索系统不会检索md文件内的内容，我的解决方法是用pychram建立一个工程，然后再pychram里搜索，总之能检索到就行。\n我这里报错的文件在“blog\\content\\post\\rich-content\\index.md”里面，如果用的类似主题而且懒得去用别的软件建索引，可以试试直接到这个文件里碰碰运气。\n","date":"2023-03-12T00:00:00Z","image":"https://bi1kbu.github.io/p/hugo-install/wx_20230312153745_hucdd5087cc4a7500436de73b01d7379f0_110512_120x120_fill_box_smart1_3.png","permalink":"https://bi1kbu.github.io/p/hugo-install/","title":"第一篇博客，讲讲我在搭建Hugo博客时踩过的坑"}]